// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"fmt"
	"io"
	"strconv"
)

type Coach struct {
	ID         int      `json:"id"`
	Profile    *Profile `json:"profile"`
	Leadership float64  `json:"leadership"`
}

type Instruction struct {
	ID                  int                 `json:"id"`
	TopPlayer           *Player             `json:"topPlayer"`
	TopInstruction      TopInstruction      `json:"topInstruction"`
	JunglePlayer        *Player             `json:"junglePlayer"`
	JungleInstruction   JungleInstruction   `json:"jungleInstruction"`
	MidPlayer           *Player             `json:"midPlayer"`
	MidInstruction      MidInstruction      `json:"midInstruction"`
	MarksmanPlayer      *Player             `json:"marksmanPlayer"`
	MarksmanInstruction MarksmanInstruction `json:"marksmanInstruction"`
	SupportPlayer       *Player             `json:"supportPlayer"`
	SupportInstruction  SupportInstruction  `json:"supportInstruction"`
	PickBanStrategy     PickBanStrategy     `json:"pickBanStrategy"`
	InGameStrategy      InGameStrategy      `json:"inGameStrategy"`
}

type League struct {
	ID       int    `json:"id"`
	Name     string `json:"name"`
	Division int    `json:"division"`
}

type Manager struct {
	ID      int      `json:"id"`
	Profile *Profile `json:"profile"`
}

type Match struct {
	ID              int          `json:"id"`
	League          *League      `json:"league"`
	Home            *Team        `json:"home"`
	HomeInstruction *Instruction `json:"homeInstruction"`
	Away            *Team        `json:"away"`
	AwayInstruction *Instruction `json:"awayInstruction"`
}

type Player struct {
	ID           int      `json:"id"`
	Profile      *Profile `json:"profile"`
	Team         *Team    `json:"team"`
	Vision       float64  `json:"vision"`
	ChampionPool float64  `json:"championPool"`
	LastHit      float64  `json:"lastHit"`
	Wage         int      `json:"wage"`
}

type Profile struct {
	ID        int    `json:"id"`
	FirstName string `json:"firstName"`
	LastName  string `json:"lastName"`
	GamerTag  string `json:"gamerTag"`
	Birthday  string `json:"birthday"`
}

type Team struct {
	ID      int      `json:"id"`
	User    *User    `json:"user"`
	Coach   *Coach   `json:"coach"`
	League  *League  `json:"league"`
	Manager *Manager `json:"manager"`
	Name    string   `json:"name"`
	Fans    int      `json:"fans"`
	Money   int      `json:"money"`
}

type User struct {
	ID       int    `json:"id"`
	Username string `json:"username"`
	Password string `json:"password"`
}

type InGameStrategy string

const (
	InGameStrategyNone InGameStrategy = "NONE"
)

var AllInGameStrategy = []InGameStrategy{
	InGameStrategyNone,
}

func (e InGameStrategy) IsValid() bool {
	switch e {
	case InGameStrategyNone:
		return true
	}
	return false
}

func (e InGameStrategy) String() string {
	return string(e)
}

func (e *InGameStrategy) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = InGameStrategy(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid InGameStrategy", str)
	}
	return nil
}

func (e InGameStrategy) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type JungleInstruction string

const (
	JungleInstructionNone   JungleInstruction = "NONE"
	JungleInstructionPush   JungleInstruction = "PUSH"
	JungleInstructionInvade JungleInstruction = "INVADE"
)

var AllJungleInstruction = []JungleInstruction{
	JungleInstructionNone,
	JungleInstructionPush,
	JungleInstructionInvade,
}

func (e JungleInstruction) IsValid() bool {
	switch e {
	case JungleInstructionNone, JungleInstructionPush, JungleInstructionInvade:
		return true
	}
	return false
}

func (e JungleInstruction) String() string {
	return string(e)
}

func (e *JungleInstruction) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = JungleInstruction(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid JungleInstruction", str)
	}
	return nil
}

func (e JungleInstruction) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type MarksmanInstruction string

const (
	MarksmanInstructionNone MarksmanInstruction = "NONE"
	MarksmanInstructionPush MarksmanInstruction = "PUSH"
)

var AllMarksmanInstruction = []MarksmanInstruction{
	MarksmanInstructionNone,
	MarksmanInstructionPush,
}

func (e MarksmanInstruction) IsValid() bool {
	switch e {
	case MarksmanInstructionNone, MarksmanInstructionPush:
		return true
	}
	return false
}

func (e MarksmanInstruction) String() string {
	return string(e)
}

func (e *MarksmanInstruction) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = MarksmanInstruction(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid MarksmanInstruction", str)
	}
	return nil
}

func (e MarksmanInstruction) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type MidInstruction string

const (
	MidInstructionNone MidInstruction = "NONE"
	MidInstructionPush MidInstruction = "PUSH"
)

var AllMidInstruction = []MidInstruction{
	MidInstructionNone,
	MidInstructionPush,
}

func (e MidInstruction) IsValid() bool {
	switch e {
	case MidInstructionNone, MidInstructionPush:
		return true
	}
	return false
}

func (e MidInstruction) String() string {
	return string(e)
}

func (e *MidInstruction) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = MidInstruction(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid MidInstruction", str)
	}
	return nil
}

func (e MidInstruction) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type PickBanStrategy string

const (
	PickBanStrategyNone PickBanStrategy = "NONE"
)

var AllPickBanStrategy = []PickBanStrategy{
	PickBanStrategyNone,
}

func (e PickBanStrategy) IsValid() bool {
	switch e {
	case PickBanStrategyNone:
		return true
	}
	return false
}

func (e PickBanStrategy) String() string {
	return string(e)
}

func (e *PickBanStrategy) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = PickBanStrategy(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid PickBanStrategy", str)
	}
	return nil
}

func (e PickBanStrategy) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type SupportInstruction string

const (
	SupportInstructionNone SupportInstruction = "NONE"
	SupportInstructionPush SupportInstruction = "PUSH"
)

var AllSupportInstruction = []SupportInstruction{
	SupportInstructionNone,
	SupportInstructionPush,
}

func (e SupportInstruction) IsValid() bool {
	switch e {
	case SupportInstructionNone, SupportInstructionPush:
		return true
	}
	return false
}

func (e SupportInstruction) String() string {
	return string(e)
}

func (e *SupportInstruction) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = SupportInstruction(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid SupportInstruction", str)
	}
	return nil
}

func (e SupportInstruction) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type TopInstruction string

const (
	TopInstructionNone TopInstruction = "NONE"
	TopInstructionPush TopInstruction = "PUSH"
)

var AllTopInstruction = []TopInstruction{
	TopInstructionNone,
	TopInstructionPush,
}

func (e TopInstruction) IsValid() bool {
	switch e {
	case TopInstructionNone, TopInstructionPush:
		return true
	}
	return false
}

func (e TopInstruction) String() string {
	return string(e)
}

func (e *TopInstruction) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = TopInstruction(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid TopInstruction", str)
	}
	return nil
}

func (e TopInstruction) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
